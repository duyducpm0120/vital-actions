const axios = require('axios');
const cheerio = require('cheerio');
const moment = require('moment');
const puppeteer = require('puppeteer');
const aiService = require('./aiService');

class NewsService {
    constructor() {
        this.sources = [
            // {
            //     name: 'BBC',
            //     url: 'https://www.bbc.com/news/world',
            //     selector: '.gs-c-promo-heading',
            //     getContent: async (url, browser) => {
            //         const page = await browser.newPage();
            //         await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            //         await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });

            //         const today = moment().format('YYYY-MM-DD');
            //         const content = await page.evaluate((today) => {
            //             return {
            //                 title: document.querySelector('h1')?.textContent?.trim() || '',
            //                 content: document.querySelector('[data-gu-name="body"]')?.textContent?.trim() || '',
            //                 date: document.querySelector('time')?.getAttribute('datetime') || today
            //             };
            //         }, today);

            //         await page.close();
            //         return content;
            //     }
            // },
            // {
            //     name: 'Reuters',
            //     url: 'https://www.reuters.com/world',
            //     selector: '.article-card__title',
            //     getContent: async (url) => {
            //         // const response = await axios.get(url);
            //         // const $ = cheerio.load(response.data);
            //         // return {
            //         //     title: $('h1').first().text().trim(),
            //         //     content: $('.article-body__content__17Yit').text().trim(),
            //         //     date: $('time').first().attr('datetime') || moment().format('YYYY-MM-DD')
            //         // };
            //         const page = await browser.newPage();
            //         await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            //         await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });

            //         const today = moment().format('YYYY-MM-DD');
            //         const content = await page.evaluate((today) => {
            //             return {
            //                 title: document.querySelector('h1')?.textContent?.trim() || '',
            //                 content: document.querySelector('.article-body__content__17Yit')?.textContent?.trim() || '',
            //                 date: document.querySelector('time')?.getAttribute('datetime') || today
            //             };
            //         }, today);

            //         await page.close();
            //     }
            // },
            {
                name: 'The Guardian',
                url: 'https://www.theguardian.com/world',
                selector: 'a[data-link-name="article"]',
                getContent: async (url, browser) => {
                    const page = await browser.newPage();
                    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
                    await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });

                    const today = moment().format('YYYY-MM-DD');
                    const content = await page.evaluate((today) => {
                        return {
                            title: document.querySelector('h1')?.textContent?.trim() || '',
                            content: document.querySelector('[data-gu-name="body"]')?.textContent?.trim() || '',
                            date: document.querySelector('time')?.getAttribute('datetime') || today
                        };
                    }, today);

                    await page.close();
                    return content;
                }
            }
        ];
    }

    async crawlNews() {
        const news = [];
        const seenUrls = new Set(); // ƒê·ªÉ tr√°nh tr√πng l·∫∑p

        // Kh·ªüi t·∫°o browser v·ªõi c√°c options
        const browser = await puppeteer.launch({
            headless: 'new',
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu',
                '--window-size=1920,1080'
            ]
        });

        try {
            for (const source of this.sources) {
                try {
                    console.log(`üîÑ Crawling ${source.name}...`);
                    console.log(`üì° Requesting URL: ${source.url}`);

                    const page = await browser.newPage();
                    await page.setViewport({ width: 1920, height: 1080 });
                    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');

                    // Enable request interception
                    await page.setRequestInterception(true);
                    page.on('request', (request) => {
                        if (['image', 'stylesheet', 'font'].includes(request.resourceType())) {
                            request.abort();
                        } else {
                            request.continue();
                        }
                    });

                    // Navigate to page
                    await page.goto(source.url, {
                        waitUntil: 'networkidle0',
                        timeout: 30000
                    });

                    console.log(`‚úÖ Got response from ${source.name}`);

                    // Wait for content to load
                    await page.waitForSelector(source.selector, { timeout: 5000 })
                        .catch(() => console.log(`‚ö†Ô∏è Selector ${source.selector} not found`));

                    // L·∫•y danh s√°ch b√†i vi·∫øt
                    const articles = await page.evaluate((selector) => {
                        const elements = document.querySelectorAll(selector);
                        return Array.from(elements).slice(0, 20).map(el => ({
                            title: el.textContent.trim(),
                            url: el.href
                        }));
                    }, source.selector);

                    console.log(`üì∞ Found ${articles.length} articles from ${source.name}`);

                    for (const article of articles) {
                        if (article.url && !seenUrls.has(article.url)) {
                            seenUrls.add(article.url);
                            news.push({
                                source: source.name,
                                title: article.title,
                                url: article.url
                            });
                            console.log(`‚úÖ Added article from ${source.name} to news list`);
                        }
                    }

                    await page.close();
                    console.log(`‚úÖ Finished crawling ${source.name}`);
                } catch (error) {
                    console.error(`‚ùå Error crawling ${source.name}:`, error.message);
                    if (error.stack) {
                        console.error('Stack trace:', error.stack);
                    }
                }
            }
        } finally {
            await browser.close();
        }

        console.log(`üìä Total unique news articles found: ${news.length}`);
        return news;
    }

    async analyzeNews(articles, options = {}) {
        try {
            // Nh√≥m tin theo ngu·ªìn
            const groupedArticles = articles.reduce((acc, article) => {
                if (!acc[article.source]) {
                    acc[article.source] = [];
                }
                acc[article.source].push(article);
                return acc;
            }, {});

            // T·∫°o prompt v·ªõi format ƒë∆°n gi·∫£n
            const prompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch tin t·ª©c qu·ªëc t·∫ø. H√£y ph√¢n t√≠ch c√°c tin t·ª©c sau v√† t·∫°o b√°o c√°o chi ti·∫øt. Ch·ªâ s·ª≠ d·ª•ng c√°c HTML tags sau: <b> cho in ƒë·∫≠m, <i> cho in nghi√™ng, <a> cho link.

${Object.entries(groupedArticles).map(([source, articles]) => `
<b>${source}</b>
${articles.map(article => `‚Ä¢ ${article.title}`).join('\n')}`).join('\n\n')}

H√£y t·∫°o b√°o c√°o theo format sau:

<b>B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C QU·ªêC T·∫æ</b>

<b>1. PH√ÇN T√çCH CH√çNH TR·ªä</b>
‚Ä¢ T√≥m t·∫Øt c√°c s·ª± ki·ªán ch√≠nh
‚Ä¢ T√°c ƒë·ªông v√† xu h∆∞·ªõng
‚Ä¢ M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng

<b>2. PH√ÇN T√çCH KINH T·∫æ</b>
‚Ä¢ Di·ªÖn bi·∫øn kinh t·∫ø
‚Ä¢ T√°c ƒë·ªông ƒë·∫øn th·ªã tr∆∞·ªùng
‚Ä¢ D·ª± b√°o xu h∆∞·ªõng

<b>3. T√ÅC ƒê·ªòNG V√Ä G·ª¢I √ù CHO VI·ªÜT NAM</b>
‚Ä¢ T√°c ƒë·ªông tr·ª±c ti·∫øp v√† gi√°n ti·∫øp
‚Ä¢ Gi·∫£i ph√°p v√† chi·∫øn l∆∞·ª£c
‚Ä¢ G·ª£i √Ω h√†nh ƒë·ªông c·ª• th·ªÉ cho ng∆∞·ªùi tr·∫ª Vi·ªát Nam

L∆∞u √Ω:
‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng c√°c HTML tags: <b>, <i>, <a>
‚Ä¢ Kh√¥ng s·ª≠ d·ª•ng c√°c HTML tags kh√°c
‚Ä¢ S·ª≠ d·ª•ng emoji ƒë·ªÉ tƒÉng t√≠nh tr·ª±c quan
‚Ä¢ ƒê·ªãnh d·∫°ng vƒÉn b·∫£n r√µ r√†ng v·ªõi c√°c ti√™u ƒë·ªÅ v√† danh s√°ch
‚Ä¢ S·ª≠ d·ª•ng ng√¥n ng·ªØ chuy√™n nghi·ªáp nh∆∞ng d·ªÖ hi·ªÉu
‚Ä¢ T·∫≠p trung v√†o c√°c t√°c ƒë·ªông th·ª±c t·∫ø
‚Ä¢ ƒê∆∞a ra c√°c g·ª£i √Ω thi·∫øt th·ª±c v√† kh·∫£ thi

#VitalActions #DailyReport`;

            const response = await aiService.getSimpleResponse(prompt, options);
            return response;
        } catch (error) {
            console.error('Error analyzing news:', error);
            throw error;
        }
    }
}

module.exports = new NewsService(); 