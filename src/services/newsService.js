const axios = require('axios');
const cheerio = require('cheerio');
const moment = require('moment');
const puppeteer = require('puppeteer');
const aiService = require('./aiService');

class NewsService {
    constructor() {
        this.sources = [
            // {
            //     name: 'BBC',
            //     url: 'https://www.bbc.com/news/world',
            //     selector: '.gs-c-promo-heading',
            //     getContent: async (url, browser) => {
            //         const page = await browser.newPage();
            //         await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            //         await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });

            //         const today = moment().format('YYYY-MM-DD');
            //         const content = await page.evaluate((today) => {
            //             return {
            //                 title: document.querySelector('h1')?.textContent?.trim() || '',
            //                 content: document.querySelector('[data-gu-name="body"]')?.textContent?.trim() || '',
            //                 date: document.querySelector('time')?.getAttribute('datetime') || today
            //             };
            //         }, today);

            //         await page.close();
            //         return content;
            //     }
            // },
            // {
            //     name: 'Reuters',
            //     url: 'https://www.reuters.com/world',
            //     selector: '.article-card__title',
            //     getContent: async (url) => {
            //         // const response = await axios.get(url);
            //         // const $ = cheerio.load(response.data);
            //         // return {
            //         //     title: $('h1').first().text().trim(),
            //         //     content: $('.article-body__content__17Yit').text().trim(),
            //         //     date: $('time').first().attr('datetime') || moment().format('YYYY-MM-DD')
            //         // };
            //         const page = await browser.newPage();
            //         await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            //         await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });

            //         const today = moment().format('YYYY-MM-DD');
            //         const content = await page.evaluate((today) => {
            //             return {
            //                 title: document.querySelector('h1')?.textContent?.trim() || '',
            //                 content: document.querySelector('.article-body__content__17Yit')?.textContent?.trim() || '',
            //                 date: document.querySelector('time')?.getAttribute('datetime') || today
            //             };
            //         }, today);

            //         await page.close();
            //     }
            // },
            {
                name: 'The Guardian',
                url: 'https://www.theguardian.com/world',
                selector: 'a[data-link-name="article"]',
                getContent: async (url, browser) => {
                    const page = await browser.newPage();
                    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');

                    try {
                        await page.goto(url, {
                            waitUntil: 'domcontentloaded',
                            timeout: 60000
                        });

                        // ƒê·ª£i selector xu·∫•t hi·ªán
                        await page.waitForSelector('a[data-link-name="article"]', { timeout: 10000 });

                        const articles = await page.evaluate(() => {
                            const elements = document.querySelectorAll('a[data-link-name="article"]');
                            return Array.from(elements).slice(0, 10).map(el => ({
                                title: el.textContent.trim(),
                                url: el.href
                            }));
                        });

                        return articles;
                    } catch (error) {
                        console.error(`Error loading The Guardian: ${error.message}`);
                        return [];
                    } finally {
                        await page.close();
                    }
                }
            },
            {
                name: 'VnExpress',
                url: 'https://vnexpress.net/thoi-su',
                selector: 'h2.title-news a, h3.title-news a',
                getContent: async (url, browser) => {
                    const page = await browser.newPage();

                    // C·∫•u h√¨nh page
                    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
                    await page.setViewport({ width: 1920, height: 1080 });
                    await page.setDefaultNavigationTimeout(60000);
                    await page.setDefaultTimeout(60000);

                    // Enable request interception
                    await page.setRequestInterception(true);
                    page.on('request', (request) => {
                        if (['image', 'stylesheet', 'font', 'media'].includes(request.resourceType())) {
                            request.abort();
                        } else {
                            request.continue();
                        }
                    });

                    try {
                        // Th·ª≠ load trang v·ªõi timeout d√†i h∆°n
                        await page.goto(url, {
                            waitUntil: 'domcontentloaded',
                            timeout: 60000
                        });

                        // ƒê·ª£i selector xu·∫•t hi·ªán
                        await page.waitForSelector('h2.title-news a, h3.title-news a', { timeout: 10000 });

                        const articles = await page.evaluate(() => {
                            const elements = document.querySelectorAll('h2.title-news a, h3.title-news a');
                            return Array.from(elements).slice(0, 10).map(el => ({
                                title: el.textContent.trim(),
                                url: el.href
                            }));
                        });

                        return articles;
                    } catch (error) {
                        console.error(`Error loading VnExpress: ${error.message}`);
                        return [];
                    } finally {
                        await page.close();
                    }
                }
            },
        ];
    }

    async crawlNews() {
        const news = {
            international: [],
            vietnam: []
        };
        const seenUrls = new Set();

        const browser = await puppeteer.launch({
            headless: 'new',
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu',
                '--window-size=1920,1080',
                '--disable-web-security',
                '--disable-features=IsolateOrigins,site-per-process'
            ]
        });

        try {
            for (const source of this.sources) {
                try {
                    console.log(`üîÑ Crawling ${source.name}...`);
                    console.log(`üì° Requesting URL: ${source.url}`);

                    const articles = await source.getContent(source.url, browser);
                    console.log(`üì∞ Found ${articles.length} articles from ${source.name}`);

                    for (const article of articles) {
                        if (article.url && !seenUrls.has(article.url)) {
                            seenUrls.add(article.url);

                            // Ph√¢n lo·∫°i tin t·ª©c
                            const newsItem = {
                                source: source.name,
                                title: article.title,
                                url: article.url,
                                category: this.categorizeNews(article.title),
                                sentiment: await this.analyzeSentiment(article.title),
                                keywords: await this.extractKeywords(article.title)
                            };

                            if (source.name === 'The Guardian') {
                                news.international.push(newsItem);
                            } else {
                                news.vietnam.push(newsItem);
                            }

                            console.log(`‚úÖ Added article from ${source.name} to news list`);
                        }
                    }

                    console.log(`‚úÖ Finished crawling ${source.name}`);
                } catch (error) {
                    console.error(`‚ùå Error crawling ${source.name}:`, error.message);
                    if (error.stack) {
                        console.error('Stack trace:', error.stack);
                    }
                }
            }
        } finally {
            await browser.close();
        }

        console.log(`üìä Total unique news articles found: ${news.international.length + news.vietnam.length}`);
        return news;
    }

    // Ph√¢n lo·∫°i tin t·ª©c
    categorizeNews(title) {
        const categories = {
            politics: ['ch√≠nh tr·ªã', 'ch√≠nh ph·ªß', 'qu·ªëc h·ªôi', 'b·∫ßu c·ª≠', 'ƒë·∫£ng', 'l√£nh ƒë·∫°o', 'th·ªß t∆∞·ªõng', 't·ªïng th·ªëng'],
            economy: ['kinh t·∫ø', 'th·ªã tr∆∞·ªùng', 'ch·ª©ng kho√°n', 'l·∫°m ph√°t', 'l√£i su·∫•t', 'doanh nghi·ªáp', 'ƒë·∫ßu t∆∞'],
            society: ['x√£ h·ªôi', 'gi√°o d·ª•c', 'y t·∫ø', 'm√¥i tr∆∞·ªùng', 'giao th√¥ng', 'an to√†n', 'tr·∫≠t t·ª±'],
            international: ['qu·ªëc t·∫ø', 'ƒë·ªëi ngo·∫°i', 'h·ªôi nh·∫≠p', 'h·ª£p t√°c', 'quan h·ªá'],
            security: ['an ninh', 'qu·ªëc ph√≤ng', 'bi·ªÉn ƒë·∫£o', 'bi√™n gi·ªõi', 'ch·ªß quy·ªÅn']
        };

        const titleLower = title.toLowerCase();
        for (const [category, keywords] of Object.entries(categories)) {
            if (keywords.some(keyword => titleLower.includes(keyword))) {
                return category;
            }
        }
        return 'other';
    }

    // Ph√¢n t√≠ch c·∫£m x√∫c
    async analyzeSentiment(text) {
        const positiveWords = ['t√≠ch c·ª±c', 'th√†nh c√¥ng', 'tƒÉng tr∆∞·ªüng', 'ph√°t tri·ªÉn', 'c·∫£i thi·ªán', 'ƒë·ªôt ph√°'];
        const negativeWords = ['ti√™u c·ª±c', 'th·∫•t b·∫°i', 'suy tho√°i', 'kh·ªßng ho·∫£ng', 'r·ªßi ro', 'th√°ch th·ª©c'];

        const textLower = text.toLowerCase();
        let score = 0;

        positiveWords.forEach(word => {
            if (textLower.includes(word)) score++;
        });

        negativeWords.forEach(word => {
            if (textLower.includes(word)) score--;
        });

        if (score > 0) return 'positive';
        if (score < 0) return 'negative';
        return 'neutral';
    }

    // Tr√≠ch xu·∫•t t·ª´ kh√≥a
    async extractKeywords(text) {
        const stopWords = ['v√†', 'c·ªßa', 'trong', 'v·ªõi', 'cho', 't·ª´', 'ƒë·∫øn', 'n√†y', 'ƒë√≥', 'ƒë√¢y'];
        const words = text.toLowerCase().split(/\s+/);
        return words.filter(word => !stopWords.includes(word) && word.length > 2).slice(0, 5);
    }

    async analyzeNews(articles, options = {}) {
        const { international, vietnam } = articles;

        const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh v√† ƒë·ªãa ch√≠nh tr·ªã, v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám trong vi·ªác ph√¢n t√≠ch t√°c ƒë·ªông c·ªßa c√°c s·ª± ki·ªán ch√≠nh tr·ªã th·∫ø gi·ªõi ƒë·∫øn th·ªã tr∆∞·ªùng t√†i ch√≠nh v√† c∆° h·ªôi ƒë·∫ßu t∆∞. H√£y ph√¢n t√≠ch c√°c tin t·ª©c sau v√† t·∫°o b√°o c√°o t·∫≠p trung v√†o t√°c ƒë·ªông th·ª±c t·∫ø ƒë·∫øn th·ªã tr∆∞·ªùng v√† c∆° h·ªôi ƒë·∫ßu t∆∞ cho ng∆∞·ªùi tr·∫ª Vi·ªát Nam.

QUAN TR·ªåNG: B√°o c√°o ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng b·∫±ng HTML. CH·ªà s·ª≠ d·ª•ng c√°c th·∫ª HTML sau (ƒë√¢y l√† nh·ªØng th·∫ª duy nh·∫•t ƒë∆∞·ª£c Telegram h·ªó tr·ª£):
- <b> cho in ƒë·∫≠m
- <i> cho in nghi√™ng
- <u> cho g·∫°ch ch√¢n
- <a href="URL"> cho li√™n k·∫øt
- <code> cho code
- <pre> cho block code

KH√îNG s·ª≠ d·ª•ng b·∫•t k·ª≥ th·∫ª HTML n√†o kh√°c nh∆∞ <body>, <div>, <p>, <span>, <h1>, <h2>, v.v.
KH√îNG s·ª≠ d·ª•ng markdown ho·∫∑c b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o kh√°c.

<b>TIN T·ª®C TH·∫æ GI·ªöI</b>
${international.map(article => `
‚Ä¢ <b>${article.title}</b>
  - Ngu·ªìn: ${article.source}
  - Ph√¢n lo·∫°i: ${article.category}
  - C·∫£m x√∫c: ${article.sentiment}
  - T·ª´ kh√≥a: ${article.keywords.join(', ')}`).join('\n')}

<b>TIN T·ª®C VI·ªÜT NAM</b>
${vietnam.map(article => `
‚Ä¢ <b>${article.title}</b>
  - Ngu·ªìn: ${article.source}
  - Ph√¢n lo·∫°i: ${article.category}
  - C·∫£m x√∫c: ${article.sentiment}
  - T·ª´ kh√≥a: ${article.keywords.join(', ')}`).join('\n')}

H√£y t·∫°o b√°o c√°o theo format sau (NH·ªö ch·ªâ s·ª≠ d·ª•ng c√°c th·∫ª HTML ƒë∆∞·ª£c Telegram h·ªó tr·ª£):

<b>B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C V√Ä C∆† H·ªòI ƒê·∫¶U T∆Ø</b>

<b>1. PH√ÇN T√çCH CH√çNH TR·ªä TH·∫æ GI·ªöI</b>
‚Ä¢ C√°c s·ª± ki·ªán ch√≠nh v√† t√°c ƒë·ªông:
  - Li·ªát k√™ 3-5 s·ª± ki·ªán quan tr·ªçng nh·∫•t ·∫£nh h∆∞·ªüng ƒë·∫øn th·ªã tr∆∞·ªùng
  - Ph√¢n t√≠ch t√°c ƒë·ªông tr·ª±c ti·∫øp ƒë·∫øn c√°c th·ªã tr∆∞·ªùng t√†i ch√≠nh
  - D·ª± ƒëo√°n xu h∆∞·ªõng trong 3-6 th√°ng t·ªõi

‚Ä¢ R·ªßi ro ƒë·ªãa ch√≠nh tr·ªã:
  - C√°c ƒëi·ªÉm n√≥ng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn th·ªã tr∆∞·ªùng
  - T√°c ƒë·ªông ƒë·∫øn chu·ªói cung ·ª©ng to√†n c·∫ßu
  - ·∫¢nh h∆∞·ªüng ƒë·∫øn c√°c ng√†nh c√¥ng nghi·ªáp ch√≠nh

<b>2. PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG T√ÄI CH√çNH</b>
‚Ä¢ Di·ªÖn bi·∫øn th·ªã tr∆∞·ªùng:
  - Xu h∆∞·ªõng ch√≠nh c·ªßa c√°c th·ªã tr∆∞·ªùng (ch·ª©ng kho√°n, ti·ªÅn t·ªá, h√†ng h√≥a)
  - T√°c ƒë·ªông ƒë·∫øn c√°c ng√†nh kinh t·∫ø ch√≠nh
  - Bi·∫øn ƒë·ªông gi√° c·∫£ v√† l√£i su·∫•t

‚Ä¢ C∆° h·ªôi ƒë·∫ßu t∆∞:
  - C√°c ng√†nh/lƒ©nh v·ª±c ti·ªÅm nƒÉng
  - Chi·∫øn l∆∞·ª£c ph√¢n b·ªï t√†i s·∫£n
  - C√°c c√¥ng c·ª• ƒë·∫ßu t∆∞ ph√π h·ª£p

<b>3. T√ÅC ƒê·ªòNG V√Ä C∆† H·ªòI CHO NG∆Ø·ªúI TR·∫∫ VI·ªÜT NAM</b>
‚Ä¢ T√°c ƒë·ªông ƒë·∫øn th·ªã tr∆∞·ªùng Vi·ªát Nam:
  - ·∫¢nh h∆∞·ªüng ƒë·∫øn c√°c ng√†nh kinh t·∫ø ch·ªß ch·ªët
  - T√°c ƒë·ªông ƒë·∫øn th·ªã tr∆∞·ªùng ch·ª©ng kho√°n v√† b·∫•t ƒë·ªông s·∫£n
  - Xu h∆∞·ªõng vi·ªác l√†m v√† thu nh·∫≠p

‚Ä¢ Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ v√† b·∫£o v·ªá t√†i s·∫£n:

<b>1. ƒê·∫ßu t∆∞ ng·∫Øn h·∫°n (3-6 th√°ng):</b>
- C√°c k√™nh ƒë·∫ßu t∆∞ an to√†n
- C√°ch b·∫£o v·ªá d√≤ng ti·ªÅn
- Chi·∫øn l∆∞·ª£c qu·∫£n l√Ω r·ªßi ro

<b>2. ƒê·∫ßu t∆∞ d√†i h·∫°n (1-3 nƒÉm):</b>
- C√°c ng√†nh/lƒ©nh v·ª±c ti·ªÅm nƒÉng
- Chi·∫øn l∆∞·ª£c t√≠ch l≈©y t√†i s·∫£n
- K·∫ø ho·∫°ch t√†i ch√≠nh c√° nh√¢n

<b>3. Ph√°t tri·ªÉn b·∫£n th√¢n:</b>
- K·ªπ nƒÉng c·∫ßn trang b·ªã
- C∆° h·ªôi ngh·ªÅ nghi·ªáp m·ªõi
- H∆∞·ªõng ph√°t tri·ªÉn s·ª± nghi·ªáp

L∆∞u √Ω quan tr·ªçng:
- B·∫ÆT BU·ªòC ch·ªâ s·ª≠ d·ª•ng c√°c th·∫ª HTML ƒë∆∞·ª£c Telegram h·ªó tr·ª£ (<b>, <i>, <u>, <a>, <code>, <pre>)
- KH√îNG s·ª≠ d·ª•ng b·∫•t k·ª≥ th·∫ª HTML n√†o kh√°c
- KH√îNG s·ª≠ d·ª•ng markdown ho·∫∑c ƒë·ªãnh d·∫°ng kh√°c
- Th√™m emoji ph√π h·ª£p ƒë·ªÉ tƒÉng t√≠nh tr·ª±c quan
- T·∫≠p trung v√†o c√°c c∆° h·ªôi ƒë·∫ßu t∆∞ th·ª±c t·∫ø v√† kh·∫£ thi
- ƒê∆∞a ra c√°c con s·ªë v√† d·ªØ li·ªáu c·ª• th·ªÉ khi c√≥ th·ªÉ
- S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, tr√°nh thu·∫≠t ng·ªØ ph·ª©c t·∫°p
- K·∫øt n·ªëi c√°c s·ª± ki·ªán qu·ªëc t·∫ø v·ªõi c∆° h·ªôi ƒë·∫ßu t∆∞ t·∫°i Vi·ªát Nam

#VitalActions #InvestmentInsights #MarketAnalysis`;

        try {
            const response = await aiService.getSimpleResponse(prompt, options);
            return response;
        } catch (error) {
            console.error('Error analyzing news:', error);
            throw error;
        }
    }
}

module.exports = new NewsService(); 